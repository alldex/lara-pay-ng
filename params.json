{"name":"LaraPay NG","tagline":"All in one Payment Solution For Laravel 5 (Nigerian Specific Providers e.g. GTPay, VoguePay, WebPay, SimplePay, CashEnvoy)","body":"\r\n*Supports Multiple Gateways with a single API approach, meaning Integration is the same across board in code.*\r\n\r\n*Note:* Do Not Use In Production, Currently being developed to be compatible with the latest version of Laravel. \r\n\r\nThe Aim is to Integrate as many Payment Gateways As Possible.\r\n\r\n# Requirements\r\n\r\n\r\n# Currently Supported\r\n- VoguePay\r\n- GTPay\r\n- CashEnvoy\r\n- SimplePay\r\n\r\n\r\n# Gateways Currently In development\r\n- WebPay\r\n\r\n\r\n# Installation\r\n\r\nSimply Run\r\n\r\n```shell\r\n    composer require dammyammy/lara-pay-ng\r\n```\r\n\r\nNext Add the Service Provider into your Providers Array in config/app.php\r\n\r\n```php\r\n    'providers' => [\r\n\r\n        /*\r\n         * Laravel Framework Service Providers...\r\n         */\r\n        'Illuminate\\Foundation\\Providers\\ArtisanServiceProvider',\r\n        'Illuminate\\Auth\\AuthServiceProvider',\r\n\r\n        ....\r\n\r\n        'LaraPayNG\\Providers\\LaraPayNGServiceProvider',\r\n    ],\r\n```\r\n\r\nNext Publish All Package Files\r\n\r\n```shell\r\nphp artisan vendor:publish\r\n```\r\n\r\nThis Would create the following:\r\n\r\n1. A *PaymentController* in *app/Http/Controllers/PaymentController.php*  \r\n- Note: This is a working Sample, you may need to change Namespace to match your Projects namespace\r\n2. *Migrations* would be published to folder database/migrations\r\n3. 4 Views, matching the Controller\r\n- one with a simulated checkout out button\r\n- one is the proceed to pay page (Pay Now Button)\r\n- one is a success notification Url, Showing a Successful Transaction\r\n- one is a failure notification Url, Showing a Failed Transaction\r\n\r\nNext Add the following to your routes page in app/Http/routes.php and edit as you seem fit, But be sure specified values match Your Config file\r\n\r\n```php\r\n    Route::get('orders',  [\r\n        'as' => 'orders',\r\n        'uses' => 'PaymentController@orders'\r\n    ]);\r\n\r\n    Route::get('checkout',  [\r\n        'as' => 'checkout',\r\n        'uses' => 'PaymentController@checkout'\r\n    ]);\r\n\r\n    $successUrl = config('lara-pay-ng.gateways.routes.success_route');\r\n    $successName = config('lara-pay-ng.gateways.routes.success_route_name');\r\n\r\n    $failureUrl = config('lara-pay-ng.gateways.routes.failure_route');\r\n    $failureName = config('lara-pay-ng.gateways.routes.failure_route_name');\r\n\r\n    Route::post('/' . $successUrl . '/{mert_id}', [\r\n        'as' => $successName,\r\n        'uses' => 'PaymentController@success'\r\n    ]);\r\n\r\n    Route::post('/' . $failureUrl . '/{mert_id}', [\r\n        'as' => $failureName,\r\n        'uses' => 'PaymentController@failed'\r\n    ]);\r\n\r\n    Route::post('/payment-notification/{mert_id}', [\r\n        'as' => 'payment-notification',\r\n        'uses' => 'PaymentController@notification'\r\n    ]);\r\n```\r\n\r\n\r\n# Remember to Disallow CSRF Token Verification for your payment routes\r\n\r\nThis is perhaps one of the use cases in which u need to absolutely do this. If this is not done, When a Transaction Id is been sent back your site would throw a TokenMismatchException, as the Gateway Provider is posting back, and doesn't have a token Generated from your app.\r\n\r\nUse the appropriate route endpoints if you did change the default names and urls.\r\n\r\n```php\r\n<?php\r\nnamespace App\\Http\\Middleware;\r\n\r\nuse Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken as BaseVerifier;\r\n\r\nclass VerifyCsrfToken extends BaseVerifier\r\n{\r\n    /**\r\n    * The URIs that should be excluded from CSRF verification.\r\n    *\r\n    * @var array\r\n    */\r\n    protected $except = [\r\n        'transaction-failed/*',\r\n        'transaction-successful/*',\r\n        'payment-notification/*',\r\n\r\n    ];\r\n}\r\n```\r\n\r\nNext Migrate the Package Tables.\r\n\r\n```shell\r\nphp artisan migrate\r\n```\r\n\r\nNext, Test the default Controller by visiting /Orders and follow through.\r\n\r\nThe Important thing to note is, to Inject the Payment Functionality into a controller, all you need do is to Inject the PaymentGatewayManager Class into that controller, and you instantly gain access to all the methods provided by the facades below.\r\n\r\n```php\r\nuse LaraPayNG\\Exceptions\\UnknownPaymentGatewayException;\r\nuse LaraPayNG\\Managers\\PaymentGatewayManager;\r\n\r\nclass PaymentController extends Controller\r\n{\r\n    /**\r\n    * @var PaymentGateway\r\n    */\r\n    private $paymentGateway;\r\n\r\n\r\n    /**\r\n    * @param PaymentGatewayManager $paymentGateway\r\n    */\r\n    public function __construct(PaymentGatewayManager $paymentGateway)\r\n    {\r\n        $this->paymentGateway = $paymentGateway;\r\n    }\r\n\r\n    ....\r\n\r\n}\r\n```\r\n\r\n# Facades\r\n\r\nFacades | Namespace | When To Use\r\n--------| ----------| -----------\r\nPay:: | \\LaraPayNG\\Facades\\Pay | Use If You want To Swap Gateways Through Config.\r\nGTPay:: | \\LaraPayNG\\Facades\\GTPay | Use If You Specifically want the GTPay Gateway Implementation.\r\nWebPay:: | \\LaraPayNG\\Facades\\WebPay | Use If You Specifically want the WebPay Gateway Implementation.\r\nVoguePay:: | \\LaraPayNG\\Facades\\VoguePay | Use If You Specifically want the VoguePay Gateway Implementation.\r\nCashEnvoy:: | \\LaraPayNG\\Facades\\CashEnvoy | Use If You Specifically want the CashEnvoy Gateway Implementation.\r\nSimplePay:: | \\LaraPayNG\\Facades\\SimplePay | Use If You Specifically want the SimplePay Gateway Implementation.\r\n\r\n\r\n## Methods Available Via Facades / PaymentGatewayManager Injection\r\n\r\nMethod | What it is Meant For\r\n-------|---------------------\r\nbutton($transactionId, $transactionData, $class, $buttonTitle) |  To create Pay Now Button For Set Gateway In a View.\r\nlogTransaction($transactionData) | To Store Data Transaction Being Made for future Reference.\r\nreceiveTransactionResponse($transactionId, $mertId) | To Get Transaction Response back from Gateway.\r\nlogResponse($transactionData) | To Store Transaction Response from Gateway.\r\ngetDefaultDriver() | To get Default Payment Gateway Driver At Runtime.\r\nwith($name) | To set Default Payment Gateway Driver At Runtime..\r\nconfig($key) | Access Config Off Set Default Payment Gateway Driver.\r\n\r\n\r\n# Events\r\n\r\nEvent Name | Full Event Namespace | When It is Thrown\r\n-----------|----------------------|------------------\r\nTransactionSuccessful | \\LaraPayNG\\Events\\TransactionSuccessful | When A Transaction is deemed successful\r\nTransactionUnsuccessful | \\LaraPayNG\\Events\\TransactionUnsuccessful | When A Transaction is deemed unsuccessful|\r\n\r\nThrowing this Events are optional, but helps serve as a hook for how you handle Completed Transactions.Take these Example Scenarios When you would Like to\r\n\r\n1. Send A customer an Email to notify them of their recent Transaction Status.\r\n2. You want to Set a person's account to active in the User's Table after a successful Transaction.\r\n3. You Want to add Paying Customer's to your Paying Customer's Mailer List.\r\n\r\nThe possibilities are endless, All you have to do is to Pull in the \\LaraPayNG\\Traits\\DetermineTransactionStatus Trait and call the dispatchAppropriateEvents($result); method within your controller. e.g.\r\n\r\n```php\r\npublic function notification($mert_id, Request $request) {\r\n    $result = $this->handleTransactionResponse($mert_id, $request);\r\n    $this->dispatchAppropriateEvents($result);\r\n    return $this->determineViewToPresent($result);\r\n}\r\n```\r\n\r\nThen Simply Create Event Listeners in app/Providers/EventServiceProvider.php\r\n\r\n```php\r\n<?php\r\nnamespace App\\Providers;\r\n\r\nuse Illuminate\\Contracts\\Events\\Dispatcher as DispatcherContract;\r\nuse Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider as ServiceProvider;\r\n\r\nclass EventServiceProvider extends ServiceProvider\r\n{\r\n    /**\r\n    * The event listener mappings for the application.\r\n    *\r\n    * @var array\r\n    */\r\n    protected $listen = [\r\n        'LaraPayNG\\Events\\TransactionSuccessful' => [\r\n            // 'App\\Listeners\\SendEmailForSuccessfulTransactions',\r\n            // 'App\\Listeners\\ActivateUser',\r\n        ],\r\n        'LaraPayNG\\Events\\TransactionUnsuccessful' => [\r\n            // 'App\\Listeners\\DeactivateUser',\r\n        ],\r\n    ];\r\n\r\n    ....\r\n\r\n}\r\n```\r\n\r\nFinally, Create Your Listener Implementations Knowing you have access to an array result containing values needed. An example implementation is written below:\r\n\r\n > File: app/Listeners/ActivateUser.php\r\n\r\n```php\r\n<?php\r\nnamespace App\\Listeners;\r\n\r\nuse LaraPayNG\\Events\\TransactionSuccessful;\r\nuse App\\User;\r\n\r\nclass ActivateUser\r\n{\r\n    /**\r\n    * Handle the event.\r\n    *\r\n    * @param  ActivateUser  $event\r\n    * @return void\r\n    */\r\n    public function handle(ActivateUser $event) {\r\n         // All Values Below are available\r\n         // $event['status'],\r\n         // $event['items'],\r\n         // $event['transaction_id'],\r\n         // $event['merchant_ref'],\r\n         // $event['amount'],\r\n         // $event['customer_id'],\r\n         // $event['payer_id'],\r\n\r\n        $user = User::find($event['customer_id']);\r\n        $user->activate = true;\r\n        $user->save();\r\n        return true;\r\n    }\r\n}\r\n```\r\n\r\n\r\n# Exceptions\r\nAll Exceptions Exist Under This Namespace;\r\n\r\n```php\r\n    namespace \\LaraPayNG\\Exceptions;\r\n```\r\n\r\nExceptions | When It is Thrown\r\n-----------|---------------------\r\nUnknownPaymentGatewayException | If set Driver for Default Gateway is unknown or unsupported.\r\nUnspecifiedTransactionAmountException | If amount(WebPay) / gtpay_tranx_amt(GTPay) is not in $transactionData.\r\nUnspecifiedPayItemIdException |  If pay_item_id is unspecifed in $transactionData array (GTPay).\r\nPaymentGatewayVerificationFailedException | If Hash Calculation is Wrong During Verification (Applies to GTPay/WebPay Gateway ).\r\n\r\n\r\n# Commands\r\nThere is a Command to Help Clear Stale Records That have been logged within a set number of days. To Use Simply Type in your terminal\r\n\r\n```shell\r\n# php artisan lara-pay-ng:purge-database gatewayname --days=3 --with-failed=false\r\nphp artisan lara-pay-ng:purge-database\r\n```\r\n\r\nYou can Pass the gatewayname attribute to the Command eg. gtpay, voguepay. This is particularly useful for Multi-gateway Setups.\r\n    \r\nIn the event of not passing the option, the default gateway driver from set config would be used.\r\n\r\nIt also can be passed a *--with-failed* option which accepts true/false. True means all Transactions that failed should be included in the deletion, as well as a *--days* option specifying how many days back data is considered old.\r\n\r\n\r\n# Tips\r\n\r\nAdd Methods Like These to Your Helpers.php File then Autoload It In Your composer.json\r\n\r\n```php\r\npublic function generateTransactionData($dessert, $transactionId) {\r\n    return 'name=' . $dessert->present()->name . ';pre=' . $dessert->present()->buyPrice . ';buyer=' . currentUserName() . '; transactionId=' . $transactionId;\r\n}\r\n\r\npublic function generateTransactionMemo($product) {\r\n    return 'Name: ' . $product->name . '; Price: ' . $product->price . '; Buyer: ' . Auth::user()->email;\r\n}\r\n```\r\n\r\nthen You can easily Do\r\n\r\n```php\r\n$product = Product::get('2');\r\n\r\n$transactionData = [\r\n    'ce_amount' => $product->price,\r\n    'ce_memo' => generateTransactionMemo($product),\r\n    \r\n    ...\r\n];\r\n\r\nCashEnvoy::button($product->id, $transactionData, 'btn btn-success', '<i class=\"fa fa-currency\"></i> Pay');\r\n```\r\n\r\n# TODO\r\n\r\n- Refactor Code\r\n- Ability to Handle Transaction From Start to Finish\r\n- Back everything up with Tests.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}