{"name":"LaraPay NG","tagline":"All in one Payment Solution For Laravel 5 (Nigerian Specific Providers e.g. GTPay, VoguePay, WebPay, SimplePay, CashEnvoy)","body":"# Nigerian Payment Gateway Solution for Laravel 5\r\n- Supports Multiple Gateways with a single API approach, meaning Integration is the same across board in code\r\n\r\n\r\n*** Do Not Use, Currently being developed to be compatible with the latest version of Laravel.\r\n\r\nAiming to Integrate as much Payment Gateways As Possible\r\n\r\n\r\n Currently Supported\r\n\r\n - VoguePay\r\n - GTPay\r\n\r\n\r\n\r\nGateways Currently being Looked at (In development)\r\n\r\n- WebPay\r\n- CashEnvoy\r\n- SimplePay\r\n\r\n\r\n# To Install\r\n\r\nSimply Run\r\n\r\n```bash\r\n    composer require dammyammy/lara-pay-ng\r\n```\r\n\r\nNext Add the Service Provider into your Providers Array in config/app.php\r\n\r\n```php\r\n    'providers' => [\r\n\r\n        /*\r\n         * Laravel Framework Service Providers...\r\n         */\r\n        'Illuminate\\Foundation\\Providers\\ArtisanServiceProvider',\r\n        'Illuminate\\Auth\\AuthServiceProvider',\r\n\r\n        ....\r\n\r\n        'LaraPayNG\\Providers\\LaraPayNGServiceProvider',\r\n    ],\r\n```\r\n\r\nNext Publish All Package Files\r\n\r\n```shell\r\n    php artisan vendor:publish\r\n```\r\n\r\nThis Would create the following:\r\n\r\n    1. A **PaymentController** in app/Http/Controllers/PaymentController.php\r\n    (i.e This is a working Sample, you may need to change Namespace to match your Projects namespace)\r\n\r\n    2. **Migrations** would be published to database/migrations\r\n\r\n    3. 4 Views, matching the Controller\r\n        - one with a simulated checkout out button\r\n        - one is the proceed to pay page (Pay Now Button)\r\n        - one is a success notification Url, Showing a Successful Transaction\r\n        - one is a failure notification Url, Showing a Failed Transaction\r\n\r\nNext Add the following to your routes page in app/Http/routes.php and edit as you seem fit, But be sure specified values match Your Config file\r\n\r\n```php\r\n    Route::get('orders',  [\r\n        'as' => 'orders',\r\n        'uses' => 'PaymentController@orders'\r\n    ]);\r\n\r\n    Route::get('checkout',  [\r\n        'as' => 'checkout',\r\n        'uses' => 'PaymentController@checkout'\r\n    ]);\r\n\r\n    $successUrl = config('lara-pay-ng.gateways.routes.success_route');\r\n    $successName = config('lara-pay-ng.gateways.routes.success_route_name');\r\n\r\n    $failureUrl = config('lara-pay-ng.gateways.routes.failure_route');\r\n    $failureName = config('lara-pay-ng.gateways.routes.failure_route_name');\r\n\r\n    Route::post('/' . $successUrl . '/{mert_id}', [\r\n        'as' => $successName,\r\n        'uses' => 'PaymentController@success'\r\n    ]);\r\n\r\n    Route::post('/' . $failureUrl . '/{mert_id}', [\r\n        'as' => $failureName,\r\n        'uses' => 'PaymentController@failed'\r\n    ]);\r\n\r\n    Route::post('/payment-notification/{mert_id}', [\r\n        'as' => 'payment-notification',\r\n        'uses' => 'PaymentController@notification'\r\n    ]);\r\n```\r\n\r\n\r\n# Remember to Disallow CSRF Token Verification for your payment routes\r\n\r\nThis is perhaps one of the use cases in which u need to absolutely do this.\r\n\r\nElse When a Transaction Id is been sent back Your site would throw a TokenMismatchException\r\n\r\nAs the Gateway Provider is posting back, and doesn't have a token Generated from your app\r\n\r\nUse the appropriate route endpoints if you did change the default names and urls\r\n\r\n\r\n```php\r\n    <?php\r\n\r\n    namespace App\\Http\\Middleware;\r\n\r\n    use Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken as BaseVerifier;\r\n\r\n    class VerifyCsrfToken extends BaseVerifier\r\n    {\r\n        /**\r\n         * The URIs that should be excluded from CSRF verification.\r\n         *\r\n         * @var array\r\n         */\r\n        protected $except = [\r\n            //\r\n\r\n            'transaction-failed/*',\r\n            'transaction-successful/*',\r\n            'payment-notification/*',\r\n\r\n        ];\r\n    }\r\n```\r\n\r\nNext Migrate the Package Tables.\r\n\r\n```shell\r\n    php artisan migrate\r\n\r\n```\r\n\r\nNext, Test the default Controller by visiting /Orders and follow through.\r\n\r\n\r\nThe Important thing to note is, to Inject the Payment Functionality into a controller,\r\nall you need do is to Inject the PaymentGatewayManager Class into that controller, and you\r\nInstantly gain access to all the methods provided by the facades below.\r\n\r\n```php\r\n    use LaraPayNG\\Exceptions\\UnknownPaymentGatewayException;\r\n    use LaraPayNG\\Managers\\PaymentGatewayManager;\r\n\r\n    class PaymentController extends Controller\r\n    {\r\n        /**\r\n         * @var PaymentGateway\r\n         */\r\n        private $paymentGateway;\r\n\r\n\r\n        /**\r\n         * @param PaymentGatewayManager $paymentGateway\r\n         */\r\n        public function __construct(PaymentGatewayManager $paymentGateway)\r\n        {\r\n            $this->paymentGateway = $paymentGateway;\r\n        }\r\n\r\n        ....\r\n\r\n    }\r\n\r\n\r\n\r\n```\r\n\r\n\r\n\r\n# Facades\r\n\r\n\r\n\r\n    Facades         Namespace                                   When To Use Which Facade\r\n\r\n    Pay::           \\LaraPayNG\\Facades\\Pay            Use If You want To Swap Gateways Through Config.\r\n    GTPay::         \\LaraPayNG\\Facades\\GTPay          Use If You Specifically want GTPay Gateway.\r\n    WebPay::        \\LaraPayNG\\Facades\\WebPay         Use If You Specifically want WebPay Gateway.\r\n    VoguePay::       \\LaraPayNG\\Facades\\VoguePay      Use If You Specifically want VoguePay Gateway.\r\n\r\n\r\n\r\n\r\n\r\n# Methods Available Via Facades / PaymentGatewayManager Injection\r\n\r\n\r\n    Method                                                               What it is Meant For\r\n\r\n    payButton($transactionId, $transactionData, $class, $buttonTitle)   To create Pay Now Button For Set Gateway In a View.\r\n    logTransaction($transactionData)                                    To Store Data Transaction Being Made for future Reference.\r\n    receiveTransactionResponse($transactionId, $mertId)                 To Get Transaction Response back from Gateway\r\n    logResponse($transactionData)                                       To Store Transaction Response from Gateway.\r\n\r\n    getDefaultDriver()                                                  To get Default Payment Gateway Driver At Runtime.\r\n    setDefaultDriver($name)                                             To set Default Payment Gateway Driver At Runtime..\r\n    config($key)                                                        Access Config Off Set Default Payment Gateway Driver.\r\n\r\n\r\n# Exceptions\r\n    All Exceptions Exist Under This Namespace;;\r\n\r\n    ```php\r\n\r\n        namespace \\LaraPayNG\\Exceptions;\r\n    ```\r\n\r\n    Exceptions                                  When It is Thrown\r\n\r\n    UnknownPaymentGatewayException              If set Driver for Default Gateway is unknown or unsupported.\r\n    UnspecifiedTransactionAmountException       If amount(WebPay) | gtpay_tranx_amt(GTPay) is not in $transactionData.\r\n    UnspecifiedPayItemIdException               If pay_item_id is unspecifed in $transactionData array (GTPay)\r\n    PaymentGatewayVerificationFailedException   If Hash Calculation is Wrong During Verification ( Applies to GTPay/WebPay Gateway ).\r\n\r\n\r\n\r\n# Commands\r\n    There is a Command to Help Clear Stale Records That have been logged within a set number of days\r\n\r\n    To Use Simply Type in your terminal\r\n\r\n    ```bash\r\n\r\n        # php artisan lara-pay-ng:purge-database gatewayname --days=3 --with-failed=false\r\n        php artisan lara-pay-ng:purge-database\r\n\r\n    ```\r\n\r\n    You can Pass the gatewayname attribute to the Command eg. gtpay, voguepay. This is particularly useful for Multi-gateway Setups\r\n    In the event of not passing the option, the default gateway driver from set config would be used.\r\n\r\n    It also can be passed a --with-failed option which accepts true/false. True means all Transactions that failed should be included in the deletion,\r\n    as well as a --days option specifying how many days back data is considered old.\r\n\r\n\r\n\r\n# Tips\r\n\r\n        Add Methods Like These to Your Helpers.php File then Autoload It In Your composer.json\r\n\r\n     ```php\r\n\r\n         public function generateTransactionData($dessert, $transactionId)\r\n         {\r\n             return 'name=' . $dessert->present()->name . ';pre=' . $dessert->present()->buyPrice\r\n             . ';buyer=' . currentUserName() . '; transactionId=' . $transactionId;\r\n         }\r\n\r\n\r\n\r\n\r\n         public function generateTransactionMemo($product)\r\n         {\r\n             return 'Name: ' . $product->name . '; Price: ' . $product->price\r\n             . '; Buyer: ' . Auth::user()->email;\r\n         }\r\n     ```\r\n\r\n     then You can easily Do\r\n\r\n     ```php\r\n        $product = Product::get('2');\r\n\r\n        $transactionData = [\r\n            'amount' => $product->price,\r\n            'memo' => generateTransactionMemo($product),\r\n            ...\r\n        ];\r\n\r\n        WebPay::payButton($product->id, $transactionData, 'btn btn-success', '<i class=\"fa fa-currency\"></i> Pay Now');\r\n\r\n     ```\r\n\r\n  ## TODO\r\n\r\n  - Refactor Code\r\n  - Create a Simple Straightforward API\r\n  - Ability to Handle Transaction From Start to Finish\r\n  - Back everything up with Tests.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}